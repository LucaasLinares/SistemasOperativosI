# VERSION FINAL 
import threading
import random
import time
import signal
import sys

# Parámetros del parque y atracciones

CAPACIDAD_PARQUE = 100
CAPACIDAD_MUSEO = 20
CAPACIDAD_SHOW = 28
CAPACIDAD_SAFARI = 52
CAPACIDAD_VEHICULO = 4
NUM_VEHICULOS = 12
MAX_PERSONAS = 100

# Semáforos para gestionar capacidad
parque_semaforo = threading.Semaphore(CAPACIDAD_PARQUE)
museo_semaforo = threading.Semaphore(CAPACIDAD_MUSEO)
show_semaforo = threading.Semaphore(CAPACIDAD_SHOW)
safari_semaforo = threading.Semaphore(CAPACIDAD_SAFARI)
vehiculo_semaforo = threading.Semaphore(0)  # Inicialmente en 0, los vehículos esperan por personas
stats_lock = threading.Lock()

# Variables para estadísticas
personas_museo = 0
personas_show = 0
personas_safari = 0
personas_transportadas = [0] * NUM_VEHICULOS
terminar = False

# Acomodador del show
class Acomodador(threading.Thread):
    def __init__(self):
        super().__init__()
        self.participantes = 0
        self.lock = threading.Lock()
        self.condicion_lleno = threading.Condition(self.lock)

    def agregar_persona(self):
        with self.lock:
            self.participantes += 1
            if self.participantes == CAPACIDAD_SHOW:
                self.condicion_lleno.notify_all()

    def iniciar_show(self):
        with self.lock:
            while self.participantes < CAPACIDAD_SHOW and not terminar:
                self.condicion_lleno.wait(timeout=1)  # Espera con timeout
            if not terminar and self.participantes >= CAPACIDAD_SHOW:
                time.sleep(5)  # Duración del show
                self.participantes = 0
                print(f"El show terminó con {CAPACIDAD_SHOW} participantes.")

# Inicializar el acomodador
acomodador = Acomodador()

# Clase Persona
class Persona(threading.Thread):
    def __init__(self, id_persona):
        super().__init__()
        self.id_persona = id_persona

    def run(self):
        global terminar
        try:
            if not parque_semaforo.acquire(timeout=1):  # Timeout para revisar si debe terminar
                return
            if not terminar:
                print(f"Persona {self.id_persona} ha entrado al parque.")
                time.sleep(1)  # Pausa de 1 segundo
                self.visitar_atraccion()
        finally:
            if not terminar:  # Solo imprimir si no se ha recibido la señal de terminación
                parque_semaforo.release()

    def visitar_atraccion(self):
        global terminar
        atracciones = ["museo", "show", "safari"]
        while atracciones and not terminar:
            atraccion = random.choice(atracciones)
            if atraccion == "museo":
                self.visitar_museo()
            elif atraccion == "show":
                self.visitar_show()
            elif atraccion == "safari":
                self.visitar_safari()
            atracciones.remove(atraccion)
            time.sleep(1)  # Pausa de 1 segundo entre atracciones
            if random.random() > 0.5 or terminar:  # Decide si se retira del parque
                break

    def visitar_museo(self):
        global personas_museo
        if not museo_semaforo.acquire(timeout=1):  # Timeout para poder salir en caso de terminación
            return
        if not terminar:
            print(f"Persona {self.id_persona} está visitando el museo.")
            time.sleep(random.uniform(1, 3))  # Simulación del tiempo en el museo
            time.sleep(1)  # Pausa de 1 segundo
            with stats_lock:
                personas_museo += 1
            museo_semaforo.release()

    def visitar_show(self):
        global personas_show
        if not show_semaforo.acquire(timeout=1):  # Timeout para poder salir en caso de terminación
            return
        if not terminar:
            print(f"Persona {self.id_persona} está esperando para ver el show de realidad virtual.")
            time.sleep(1)  # Pausa de 1 segundo
            acomodador.agregar_persona()
            acomodador.iniciar_show()
            with stats_lock:
                personas_show += 1
            show_semaforo.release()

    def visitar_safari(self):
        global personas_safari
        if not safari_semaforo.acquire(timeout=1):  # Timeout para poder salir en caso de terminación
            return
        if not terminar:
            print(f"Persona {self.id_persona} está esperando un vehículo para ir al safari.")
            time.sleep(1)  # Pausa de 1 segundo
            with stats_lock:
                personas_safari += 1
            # Liberar el semáforo del vehículo para que pueda salir
            vehiculo_semaforo.release()

# Clase Vehiculo
class Vehiculo(threading.Thread):
    def __init__(self, id_vehiculo):
        super().__init__()
        self.id_vehiculo = id_vehiculo

    def run(self):
        global terminar
        while not terminar:
            if not vehiculo_semaforo.acquire(timeout=1):  # Timeout para poder salir en caso de terminación
                continue
            if not terminar:
                print(f"Vehículo {self.id_vehiculo} está transportando personas al safari.")
                time.sleep(2)  # Simulación del tiempo de viaje
                with stats_lock:
                    personas_transportadas[self.id_vehiculo] += CAPACIDAD_VEHICULO
                safari_semaforo.release()  # Liberar el semáforo del safari
            time.sleep(1)  # Pausa de 1 segundo para evitar ciclos infinitos

# Función para manejar la señal de terminación
def signal_handler(sig, frame):
    global terminar
    print("\nSeñal de terminación recibida. Cerrando el parque...")
    terminar = True  # Señal para que los hilos terminen

# Asignar el manejador de señales para SIGTERM y SIGINT (Ctrl+C)
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# Inicialización de los hilos de vehículos y acomodador
vehiculos = [Vehiculo(i) for i in range(NUM_VEHICULOS)]
acomodador.start()

# Ejecutar los vehículos
for v in vehiculos:
    v.start()

# Crear y ejecutar las personas
personas = [Persona(i) for i in range(MAX_PERSONAS)]  # Usamos MAX_PERSONAS para la simulación
for p in personas:
    p.start()

# Esperar a que todas las personas terminen
for p in personas:
    p.join()

# Imprimir estadísticas finales inmediatamente después de recibir la señal de terminación
def imprimir_estadisticas_finales():
    with stats_lock:
        print("\n--- Estadísticas finales ---")
        print(f"Personas que visitaron el museo: {personas_museo}")
        print(f"Personas que vieron el show de realidad virtual: {personas_show}")
        print(f"Personas que visitaron el safari: {personas_safari}")

# Esperar a que todos los vehículos terminen y luego imprimir estadísticas
for v in vehiculos:
    v.join()

# Imprimir estadísticas solo al final
imprimir_estadisticas_finales()

# Salir del programa
sys.exit(0)
